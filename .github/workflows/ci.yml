# COPILOT: CI/CD pipeline for professional SDK development
# This workflow ensures code quality, security, and compatibility across platforms

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    
env:
  PYTHON_VERSION: "3.9"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pytest
        pip install -r requirements.txt
        
    - name: Code formatting check
      run: black --check sdk/ examples/ training/ tests/
      
    - name: Lint with flake8
      run: |
        flake8 sdk/ examples/ training/ tests/ \
          --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 sdk/ examples/ training/ tests/ \
          --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
    - name: Type checking
      run: mypy sdk/ --ignore-missing-imports

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=sdk --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  build-and-publish:
    name: Build and Publish
    needs: [code-quality, security-scan, test-suite]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import constellation_overwatch; print('Package installed successfully')"
        
    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker images
      run: |
        docker-compose build --no-cache
        
    - name: Test Docker environment
      run: |
        docker-compose up -d
        sleep 30
        docker-compose exec -T ros-dev bash -c "source /opt/ros/humble/setup.bash && ros2 --version"
        docker-compose down
